#ifndef gradient_h
#define gradient_h

#include <math.h>
#include <Eigen/Dense>

/**
 * Gradient of neo-hookean density function. Autogenerated in algebra software.
 */

float psi_grad00(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad00_result;
   psi_grad00_result = 2*C*(f00 - (-f11*f22 + f12*f21)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) + 2*D*(-f11*f22 + f12*f21)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad00_result;

}

float psi_grad01(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad01_result;
   psi_grad01_result = 2*C*(f01 + (-f10*f22 + f12*f20)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) - 2*D*(-f10*f22 + f12*f20)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad01_result;

}

float psi_grad02(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad02_result;
   psi_grad02_result = 2*C*(f02 - (-f10*f21 + f11*f20)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) + 2*D*(-f10*f21 + f11*f20)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad02_result;

}

float psi_grad10(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad10_result;
   psi_grad10_result = 2*C*(f10 + (-f01*f22 + f02*f21)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) - 2*D*(-f01*f22 + f02*f21)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad10_result;

}

float psi_grad11(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad11_result;
   psi_grad11_result = 2*C*(f11 - (-f00*f22 + f02*f20)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) + 2*D*(-f00*f22 + f02*f20)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad11_result;

}

float psi_grad12(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad12_result;
   psi_grad12_result = 2*C*(f12 + (-f00*f21 + f01*f20)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) - 2*D*(-f00*f21 + f01*f20)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad12_result;

}

float psi_grad20(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad20_result;
   psi_grad20_result = 2*C*(f20 - (-f01*f12 + f02*f11)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) + 2*D*(-f01*f12 + f02*f11)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad20_result;

}

float psi_grad21(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad21_result;
   psi_grad21_result = 2*C*(f21 + (-f00*f12 + f02*f10)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) - 2*D*(-f00*f12 + f02*f10)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad21_result;

}

float psi_grad22(float C, float D, float f00, float f01, float f02, float f10, float f11, float f12, float f20, float f21, float f22) {

   float psi_grad22_result;
   psi_grad22_result = 2*C*(f22 - (-f00*f11 + f01*f10)/(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11))) + 2*D*(-f00*f11 + f01*f10)*(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1);
   return psi_grad22_result;

}

Eigen::VectorXf gradPsi(float C, float D, Eigen::VectorXf f) {
    Eigen::VectorXf gradPsi = Eigen::VectorXf::Zero(9);
    gradPsi[0] = psi_grad00(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[1] = psi_grad01(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[2] = psi_grad02(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[3] = psi_grad10(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[4] = psi_grad11(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[5] = psi_grad12(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[6] = psi_grad20(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[7] = psi_grad21(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    gradPsi[8] = psi_grad22(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
    return gradPsi;
}

double psi(double C, double D, double f00, double f01, double f02, double f10, double f11, double f12, double f20, double f21, double f22) {

   double psi_result;
   psi_result = C*(pow(f00, 2) + pow(f01, 2) + pow(f02, 2) + pow(f10, 2) + pow(f11, 2) + pow(f12, 2) + pow(f20, 2) + pow(f21, 2) + pow(f22, 2) - 2*log(-f00*(-f11*f22 + f12*f21) + f10*(-f01*f22 + f02*f21) - f20*(-f01*f12 + f02*f11)) - 3) + D*pow(f00*(-f11*f22 + f12*f21) - f10*(-f01*f22 + f02*f21) + f20*(-f01*f12 + f02*f11) + 1, 2);
   return psi_result;

}

float psi(float C, float D, Eigen::VectorXf f) {
    return psi(C, D, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7], f[8]);
}

#endif /* gradient_h */
